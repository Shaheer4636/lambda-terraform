Title: Fix CloudWatch Synthetics canary error “TypeError: require(...) is not a function”

Goal
Deploy a clean CloudWatch Synthetics canary that runs without /opt/nodejs/node_modules/index.js:6:63 errors.

Why
That stack frame only appears when a dependency ZIP or Lambda layer injects /opt/nodejs/node_modules/index.js, which then calls the result of require(...). We must remove every extra dependency/layer and ship a single-file script.

Tasks (do all, in order)

Use correct runtime and handler

Runtime: syn-nodejs-puppeteer-6.2 (CloudWatch Synthetics “Node.js with Puppeteer”).

Handler: index.handler.

For this test, do not attach a VPC.

Remove all extra code sources

In the canary editor, ensure “Add dependency” is completely empty. If any ZIP is listed, remove/clear it and save.

Ensure no Lambda layers are attached to the underlying function:

Fetch the function ARN from the canary details.

Run:

aws lambda get-function-configuration --function-name <FUNCTION_ARN> --query 'Layers'


Expected output: null or []. If any layers are present, remove them (edit canary → clear layers) or recreate the canary.

Package exactly one file at the ZIP root

Create index.js with the code below.

Do not include package.json, node_modules, or any folders.

Zip commands:

macOS/Linux:

rm -f canary.zip
zip -9 canary.zip index.js


Windows PowerShell:

if (Test-Path canary.zip) { Remove-Item canary.zip }
Compress-Archive -Path .\index.js -DestinationPath .\canary.zip


Use the known-good script (CommonJS, correct case)

'use strict';

const synthetics = require('Synthetics');
const log = require('SyntheticsLogger');

const canaryScript = async () => {
  const page = await synthetics.getPage();

  const cfg = synthetics.getConfiguration();
  cfg.setConfig({
    continueOnStepFailure: false,
    includeRequestHeaders: true,
    includeResponseHeaders: true,
    restrictedHeaders: ['x-amz-security-token'],
  });

  await page.goto('https://example.com', { waitUntil: 'domcontentloaded', timeout: 30000 });
  log.info('Landed on example.com');
  await synthetics.takeScreenshot('home', 'loaded');
};

exports.handler = async () => synthetics.execute(canaryScript);


Notes:

Keep the module names’ capitalization exactly: Synthetics, SyntheticsLogger.

Do not wrap require('Synthetics') or require('SyntheticsLogger') in (...).

Do not enable bundling/transpilation. Upload the raw file.

If it still fails, run one-time diagnostics to prove the collision
Replace index.js temporarily with:

'use strict';
const fs = require('fs');
try {
  console.log('LIST /opt/nodejs ->', fs.readdirSync('/opt/nodejs'));
  console.log('LIST /opt/nodejs/node_modules ->', fs.readdirSync('/opt/nodejs/node_modules'));
  const p = '/opt/nodejs/node_modules/index.js';
  console.log('EXISTS rogue index.js ->', fs.existsSync(p));
  if (fs.existsSync(p)) {
    console.log('ROGUE index.js (first lines):\n' +
      fs.readFileSync(p, 'utf8').split('\n').slice(0, 30).join('\n'));
  }
} catch (e) { console.log('diag error:', e?.message); }
const synthetics = require('Synthetics');
exports.handler = async () => synthetics.execute(async () => {});


Run the canary once and capture logs. If EXISTS rogue index.js -> true, there is still a dependency/layer attached. Remove it and redeploy the clean script from step 4.

Acceptance criteria

aws lambda get-function-configuration --function-name <FUNCTION_ARN> --query 'Layers' returns null or [].

Canary runs successfully with runtime syn-nodejs-puppeteer-6.2, handler index.handler.

No /opt/nodejs/node_modules/index.js appears in logs. No TypeError: require(...) is not a function.

Deliverables

Confirmation of runtime and handler settings.

Output of the Layers query (showing empty).

Screenshot or log snippet of a successful run.
